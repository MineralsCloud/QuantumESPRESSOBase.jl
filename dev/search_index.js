var documenterSearchIndex = {"docs":
[{"location":"developers/style-guide/#style","page":"Style Guide","title":"Style Guide","text":"","category":"section"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"Pages = [\"style.md\"]\nDepth = 3","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"This section describes the coding style rules that apply to our code and that we recommend you to use it also.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"In some cases, our style guide diverges from Julia's official Style Guide (Please read it!). All such cases will be explicitly noted and justified.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"Our style guide adopts many recommendations from the BlueStyle. Please read the BlueStyle before contributing to this package. If not following, your pull requests may not be accepted.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"info: Info\nThe style guide is always a work in progress, and not all QuantumESPRESSOBase code follows the rules. When modifying QuantumESPRESSOBase, please fix the style violations of the surrounding code (i.e., leave the code tidier than when you started). If large changes are needed, consider separating them into another pull request.","category":"page"},{"location":"developers/style-guide/#Formatting","page":"Style Guide","title":"Formatting","text":"","category":"section"},{"location":"developers/style-guide/#formatter","page":"Style Guide","title":"Run JuliaFormatter","text":"","category":"section"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"QuantumESPRESSOBase uses JuliaFormatter as an auto-formatting tool.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"We use the options contained in .JuliaFormatter.toml.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"To format your code, cd to the QuantumESPRESSOBase directory, then run:","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"using Pkg\nPkg.add(\"JuliaFormatter\")\nusing JuliaFormatter: format\nformat(\"docs\");\nformat(\"src\");\nformat(\"test\");","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"info: Info\nA continuous integration check verifies that all PRs made to QuantumESPRESSOBase have passed the formatter.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"The following sections outline extra style guide points that are not fixed automatically by JuliaFormatter.","category":"page"},{"location":"developers/style-guide/#Use-the-Julia-extension-for-Visual-Studio-Code","page":"Style Guide","title":"Use the Julia extension for Visual Studio Code","text":"","category":"section"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"Please use VS Code with the Julia extension to edit, format, and test your code. We do not recommend using other editors to edit your code for the time being.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"This extension already has JuliaFormatter integrated. So to format your code, follow the steps listed here.","category":"page"},{"location":"api/Inputs/Inputs/","page":"Inputs module","title":"Inputs module","text":"CurrentModule = QuantumESPRESSOBase.Inputs","category":"page"},{"location":"api/Inputs/Inputs/#QuantumESPRESSOBase.Inputs-module","page":"Inputs module","title":"QuantumESPRESSOBase.Inputs module","text":"","category":"section"},{"location":"api/Inputs/Inputs/","page":"Inputs module","title":"Inputs module","text":"Pages = [\"Inputs.md\"]\nDepth = 3","category":"page"},{"location":"api/Inputs/Inputs/#Types","page":"Inputs module","title":"Types","text":"","category":"section"},{"location":"api/Inputs/Inputs/#Methods","page":"Inputs module","title":"Methods","text":"","category":"section"},{"location":"api/Inputs/Inputs/","page":"Inputs module","title":"Inputs module","text":"optionpool\nallnamelists\nallcards\nrequired_namelists\noptional_namelists\nrequired_cards\noptional_cards","category":"page"},{"location":"api/Inputs/Inputs/#QuantumESPRESSOBase.Inputs.optionpool","page":"Inputs module","title":"QuantumESPRESSOBase.Inputs.optionpool","text":"optionpool(T::Type{<:Card})\n\nReturn the allowed options for Card T.\n\nExamples\n\njulia> optionpool(AtomicPositionsCard)\n(\"alat\", \"bohr\", \"angstrom\", \"crystal\", \"crystal_sg\")\n\njulia> optionpool(CellParametersCard)\n(\"alat\", \"bohr\", \"angstrom\")\n\njulia> optionpool(SpecialKPointsCard)\n(\"tpiba\", \"crystal\", \"tpiba_b\", \"crystal_b\", \"tpiba_c\", \"crystal_c\")\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/Inputs/#QuantumESPRESSOBase.Inputs.allnamelists","page":"Inputs module","title":"QuantumESPRESSOBase.Inputs.allnamelists","text":"allnamelists(input::PWInput)\n\nReturn an iterator of all Namelists from a PWInput. You may want to collect them.\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/Inputs/#QuantumESPRESSOBase.Inputs.allcards","page":"Inputs module","title":"QuantumESPRESSOBase.Inputs.allcards","text":"allcards(input::PWInput)\n\nGet all Cards from a PWInput.\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/Inputs/#QuantumESPRESSOBase.Inputs.required_namelists","page":"Inputs module","title":"QuantumESPRESSOBase.Inputs.required_namelists","text":"required_namelists(input::PWInput)\n\nReturn an iterator of required Namelists from a PWInput. You may want to collect them.\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/Inputs/#QuantumESPRESSOBase.Inputs.optional_namelists","page":"Inputs module","title":"QuantumESPRESSOBase.Inputs.optional_namelists","text":"optional_namelists(input::PWInput)\n\nReturn an iterator of optional Namelists from a PWInput. You may want to collect them.\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/Inputs/#QuantumESPRESSOBase.Inputs.required_cards","page":"Inputs module","title":"QuantumESPRESSOBase.Inputs.required_cards","text":"required_cards(input::PWInput)\n\nReturn an iterator of required Cards from a PWInput. You may want to collect them.\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/Inputs/#QuantumESPRESSOBase.Inputs.optional_cards","page":"Inputs module","title":"QuantumESPRESSOBase.Inputs.optional_cards","text":"optional_cards(input::PWInput)\n\nReturn an iterator of optional Cards from a PWInput. You may want to collect them.\n\n\n\n\n\n","category":"function"},{"location":"developers/contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Pages = [\"contributing.md\"]\nDepth = 3","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Welcome! This document explains some ways you can contribute to QuantumESPRESSOBase.","category":"page"},{"location":"developers/contributing/#Code-of-conduct","page":"Contributing","title":"Code of conduct","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"This project and everyone participating in it is governed by the \"Contributor Covenant Code of Conduct\". By participating, you are expected to uphold this code.","category":"page"},{"location":"developers/contributing/#Join-the-community-forum","page":"Contributing","title":"Join the community forum","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"First up, join the community forum.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The forum is a good place to ask questions about how to use QuantumESPRESSOBase. You can also use the forum to discuss possible feature requests and bugs before raising a GitHub issue (more on this below).","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Aside from asking questions, the easiest way you can contribute to QuantumESPRESSOBase is to help answer questions on the forum!","category":"page"},{"location":"developers/contributing/#Improve-the-documentation","page":"Contributing","title":"Improve the documentation","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Chances are, if you asked (or answered) a question on the community forum, then it is a sign that the documentation could be improved. Moreover, since it is your question, you are probably the best-placed person to improve it!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The docs are written in Markdown and are built using Documenter.jl. You can find the source of all the docs here.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"If your change is small (like fixing typos, or one or two sentence corrections), the easiest way to do this is via GitHub's online editor. (GitHub has help on how to do this.)","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"If your change is larger, or touches multiple files, you will need to make the change locally and then use Git to submit a pull request. (See Contribute code to QuantumESPRESSOBase below for more on this.)","category":"page"},{"location":"developers/contributing/#File-a-bug-report","page":"Contributing","title":"File a bug report","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Another way to contribute to QuantumESPRESSOBase is to file bug reports.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Make sure you read the info in the box where you write the body of the issue before posting. You can also find a copy of that info here.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf you're unsure whether you have a real bug, post on the community forum first. Someone will either help you fix the problem, or let you know the most appropriate place to open a bug report.","category":"page"},{"location":"developers/contributing/#Contribute-code-to-QuantumESPRESSOBase","page":"Contributing","title":"Contribute code to QuantumESPRESSOBase","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Finally, you can also contribute code to QuantumESPRESSOBase!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nIf you do not have experience with Git, GitHub, and Julia development, the first steps can be a little daunting. However, there are lots of tutorials available online, including:GitHub\nGit and GitHub\nGit\nJulia package development","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once you are familiar with Git and GitHub, the workflow for contributing code to QuantumESPRESSOBase is similar to the following:","category":"page"},{"location":"developers/contributing/#Step-1:-decide-what-to-work-on","page":"Contributing","title":"Step 1: decide what to work on","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The first step is to find an open issue (or open a new one) for the problem you want to solve. Then, before spending too much time on it, discuss what you are planning to do in the issue to see if other contributors are fine with your proposed changes. Getting feedback early can improve code quality, and avoid time spent writing code that does not get merged into QuantumESPRESSOBase.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nAt this point, remember to be patient and polite; you may get a lot of comments on your issue! However, do not be afraid! Comments mean that people are willing to help you improve the code that you are contributing to QuantumESPRESSOBase.","category":"page"},{"location":"developers/contributing/#Step-2:-fork-QuantumESPRESSOBase","page":"Contributing","title":"Step 2: fork QuantumESPRESSOBase","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Go to https://github.com/MineralsCloud/QuantumESPRESSOBase.jl and click the \"Fork\" button in the top-right corner. This will create a copy of QuantumESPRESSOBase under your GitHub account.","category":"page"},{"location":"developers/contributing/#Step-3:-install-QuantumESPRESSOBase-locally","page":"Contributing","title":"Step 3: install QuantumESPRESSOBase locally","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Similar to Installation, open the Julia REPL and run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.update()\nPkg.develop(\"QuantumESPRESSOBase\")","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Then the package will be cloned to your local machine. On *nix systems, the default path is ~/.julia/dev/QuantumESPRESSOBase unless you modify the JULIA_DEPOT_PATH environment variable. If you're on Windows, this will be C:\\\\Users\\\\<my_name>\\\\.julia\\\\dev\\\\QuantumESPRESSOBase. In the following text, we will call it PKGROOT.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Go to PKGROOT, start a new Julia session and run","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.instantiate()","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"to instantiate the project.","category":"page"},{"location":"developers/contributing/#Step-4:-checkout-a-new-branch","page":"Contributing","title":"Step 4: checkout a new branch","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIn the following, replace any instance of GITHUB_ACCOUNT with your GitHub username.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The next step is to checkout a development branch. In a terminal (or command prompt on Windows), run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd ~/.julia/dev/QuantumESPRESSOBase\n\ngit remote add GITHUB_ACCOUNT https://github.com/GITHUB_ACCOUNT/QuantumESPRESSOBase.jl.git\n\ngit checkout main\n\ngit pull\n\ngit checkout -b my_new_branch","category":"page"},{"location":"developers/contributing/#Step-5:-make-changes","page":"Contributing","title":"Step 5: make changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Now make any changes to the source code inside the ~/.julia/dev/QuantumESPRESSOBase directory.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Make sure you:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Follow our Style Guide and run JuliaFormatter.jl\nAdd tests and documentation for any changes or new features","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nWhen you change the source code, you'll need to restart Julia for the changes to take effect. This is a pain, so install Revise.jl.","category":"page"},{"location":"developers/contributing/#Step-6a:-test-your-code-changes","page":"Contributing","title":"Step 6a: test your code changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"To test that your changes work, run the QuantumESPRESSOBase test-suite by opening Julia and running:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd(\"~/.julia/dev/QuantumESPRESSOBase\")\nusing Pkg\nPkg.activate(\".\")\nPkg.test()","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nRunning the tests might take a long time.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf you're using Revise.jl, you can also run the tests by calling include:include(\"test/runtests.jl\")This can be faster if you want to re-run the tests multiple times.","category":"page"},{"location":"developers/contributing/#Step-6b:-test-your-documentation-changes","page":"Contributing","title":"Step 6b: test your documentation changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Open Julia, then run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd(\"~/.julia/dev/QuantumESPRESSOBase/docs\")\nusing Pkg\nPkg.activate(\".\")\ninclude(\"src/make.jl\")","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"After a while, a folder PKGROOT/docs/build will appear. Open PKGROOT/docs/build/index.html with your favorite browser, and have fun!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nBuilding the documentation might take a long time.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf there's a problem with the tests that you don't know how to fix, don't worry. Continue to step 5, and one of the QuantumESPRESSOBase contributors will comment on your pull request telling you how to fix things.","category":"page"},{"location":"developers/contributing/#Step-7:-make-a-pull-request","page":"Contributing","title":"Step 7: make a pull request","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once you've made changes, you're ready to push the changes to GitHub. Run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd ~/.julia/dev/QuantumESPRESSOBase\n\ngit add .\n\ngit commit -m \"A descriptive message of the changes\"\n\ngit push -u GITHUB_ACCOUNT my_new_branch","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Then go to https://github.com/MineralsCloud/QuantumESPRESSOBase.jl/pulls and follow the instructions that pop up to open a pull request.","category":"page"},{"location":"developers/contributing/#Step-8:-respond-to-comments","page":"Contributing","title":"Step 8: respond to comments","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"At this point, remember to be patient and polite; you may get a lot of comments on your pull request! However, do not be afraid! A lot of comments means that people are willing to help you improve the code that you are contributing to QuantumESPRESSOBase.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"To respond to the comments, go back to step 5, make any changes, test the changes in step 6, and then make a new commit in step 7. Your PR will automatically update.","category":"page"},{"location":"developers/contributing/#Step-9:-cleaning-up","page":"Contributing","title":"Step 9: cleaning up","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once the PR is merged, clean-up your Git repository ready for the next contribution!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd ~/.julia/dev/QuantumESPRESSOBase\n\ngit checkout main\n\ngit pull","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIf you have suggestions to improve this guide, please make a pull request! It's particularly helpful if you do this after your first pull request because you'll know all the parts that could be explained better.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Thanks for contributing to QuantumESPRESSOBase!","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Pages = [\"troubleshooting.md\"]\nDepth = 3","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"This page collects some possible errors you may encounter and trick how to fix them. If you have some questions about how to use this code, you are welcome to discuss with us.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you have additional tips, please either report an issue or submit a PR with suggestions.","category":"page"},{"location":"troubleshooting/#Installation-problems","page":"Troubleshooting","title":"Installation problems","text":"","category":"section"},{"location":"troubleshooting/#Cannot-find-the-julia-executable","page":"Troubleshooting","title":"Cannot find the julia executable","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Make sure you have Julia installed in your environment. Please download the latest stable version for your platform. If you are using a *nix system, the recommended way is to use Juliaup. If you do not want to install Juliaup or you are using other platforms that Julia supports, download the corresponding binaries. Then, create a symbolic link to the Julia executable. If the path is not in your $PATH environment variable, export it to your $PATH.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Some clusters, like Habanero, Comet, or Expanse, already have Julia installed as a module, you may just module load julia to use it. If not, either install by yourself or contact your administrator.","category":"page"},{"location":"troubleshooting/#Loading-QuantumESPRESSOBase","page":"Troubleshooting","title":"Loading QuantumESPRESSOBase","text":"","category":"section"},{"location":"troubleshooting/#Julia-compiles/loads-slow","page":"Troubleshooting","title":"Julia compiles/loads slow","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"First, we recommend you download the latest version of Julia. Usually, the newest version has the best performance.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you just want Julia to do a simple task and only once, you could start the Julia REPL with","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --compile=min","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"to minimize compilation or","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --optimize=0","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"to minimize optimizations, or just use both. Or you could make a system image and run with","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --sysimage custom-image.so","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"See Fredrik Ekre's talk for details.","category":"page"},{"location":"installation/#installation","page":"Installation Guide","title":"Installation Guide","text":"","category":"section"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"Here are the installation instructions for package QuantumESPRESSOBase. If you have trouble installing it, please refer to our Troubleshooting page for more information.","category":"page"},{"location":"installation/#Install-Julia","page":"Installation Guide","title":"Install Julia","text":"","category":"section"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"First, you should install Julia. We recommend downloading it from its official website. Please follow the detailed instructions on its website if you have to build Julia from source. Some computing centers provide preinstalled Julia. Please contact your administrator for more information in that case. Here's some additional information on how to set up Julia on HPC systems.","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"If you have Homebrew installed, open Terminal.app and type","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"brew install julia","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"to install it as a formula.","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"If you are also using macOS and want to install it as a prebuilt binary app, type","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"brew install --cask julia","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"instead.","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"If you want to install multiple Julia versions in the same operating system, a recommended way is to use a version manager such as juliaup. First, install juliaup. Then, run","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"juliaup add release\njuliaup default release","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"to configure the julia command to start the latest stable version of Julia (this is also the default value).","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"There is a short video introduction to juliaup made by its authors.","category":"page"},{"location":"installation/#Which-version-should-I-pick?","page":"Installation Guide","title":"Which version should I pick?","text":"","category":"section"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"You can install the \"Current stable release\" or the \"Long-term support (LTS) release\".","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"The \"Current stable release\" is the latest release of Julia. It has access to newer features, and is likely faster.\nThe \"Long-term support release\" is an older version of Julia that has continued to receive bug and security fixes. However, it may not have the latest features or performance improvements.","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"For most users, you should install the \"Current stable release\", and whenever Julia releases a new version of the current stable release, you should update your version of Julia. Note that any code you write on one version of the current stable release will continue to work on all subsequent releases.","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"For users in restricted software environments (e.g., your enterprise IT controls what software you can install), you may be better off installing the long-term support release because you will not have to update Julia as frequently.","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"Versions higher than v1.3, especially v1.6, are strongly recommended. This package may not work on v1.0 and below. Since the Julia team has set v1.6 as the LTS release, we will gradually drop support for versions below v1.6.","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"Julia and Julia packages support multiple operating systems and CPU architectures; check this table to see if it can be installed on your machine. For Mac computers with M-series processors, this package and its dependencies may not work. Please install the Intel-compatible version of Julia (for macOS x86-64) if any platform-related error occurs.","category":"page"},{"location":"installation/#Install-QuantumESPRESSOBase","page":"Installation Guide","title":"Install QuantumESPRESSOBase","text":"","category":"section"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"Now I am using macOS as a standard platform to explain the following steps:","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"Open Terminal.app, and type julia to start an interactive session (known as the REPL).\nRun the following commands and wait for them to finish:\njulia> using Pkg\n\njulia> Pkg.update()\n\njulia> Pkg.add(\"QuantumESPRESSOBase\")\nRun\njulia> using QuantumESPRESSOBase\nand have fun!\nWhile using, please keep this Julia session alive. Restarting might cost some time.","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"If you want to install the latest in-development (probably buggy) version of QuantumESPRESSOBase, type","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"using Pkg\nPkg.update()\npkg\"add https://github.com/MineralsCloud/QuantumESPRESSOBase.jl\"","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"in the second step above.","category":"page"},{"location":"installation/#Update-QuantumESPRESSOBase","page":"Installation Guide","title":"Update QuantumESPRESSOBase","text":"","category":"section"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"Please watch our GitHub repository for new releases. Once we release a new version, you can update QuantumESPRESSOBase by typing","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"using Pkg\nPkg.update(\"QuantumESPRESSOBase\")\nPkg.gc()","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"in the Julia REPL.","category":"page"},{"location":"installation/#Uninstall-and-reinstall-QuantumESPRESSOBase","page":"Installation Guide","title":"Uninstall and reinstall QuantumESPRESSOBase","text":"","category":"section"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"Sometimes errors may occur if the package is not properly installed. In this case, you may want to uninstall and reinstall the package. Here is how to do that:","category":"page"},{"location":"installation/","page":"Installation Guide","title":"Installation Guide","text":"To uninstall, in a Julia session, run\njulia> using Pkg\n\njulia> Pkg.rm(\"QuantumESPRESSOBase\")\n\njulia> Pkg.gc()\nPress ctrl+d to quit the current session. Start a new Julia session and reinstall QuantumESPRESSOBase.","category":"page"},{"location":"api/Inputs/PWscf/","page":"Inputs.PWscf module","title":"Inputs.PWscf module","text":"CurrentModule = QuantumESPRESSOBase.Inputs.PWscf","category":"page"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf-module","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf module","text":"","category":"section"},{"location":"api/Inputs/PWscf/","page":"Inputs.PWscf module","title":"Inputs.PWscf module","text":"Pages = [\"PWscf.md\"]\nDepth = 3","category":"page"},{"location":"api/Inputs/PWscf/#Types","page":"Inputs.PWscf module","title":"Types","text":"","category":"section"},{"location":"api/Inputs/PWscf/","page":"Inputs.PWscf module","title":"Inputs.PWscf module","text":"Bravais\nLattice\ncellvolume\nControlNamelist\nSystemNamelist\nElectronsNamelist\nIonsNamelist\nCellNamelist\nDosNamelist\nBandsNamelist\nAtomicSpecies\nAtomicSpeciesCard\nAtomicPosition\nAtomicPositionsCard\nCellParametersCard\nSpecialPointsCard\nPWInput","category":"page"},{"location":"api/Inputs/PWscf/#CrystallographyBase.Bravais","page":"Inputs.PWscf module","title":"CrystallographyBase.Bravais","text":"Bravais(nml::SystemNamelist)\n\nReturn a Bravais from a SystemNamelist.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#CrystallographyBase.Lattice","page":"Inputs.PWscf module","title":"CrystallographyBase.Lattice","text":"Lattice(::Bravais, p)\n\nCreate a Bravais lattice from the exact lattice type and cell parameters p (not celldm!).\n\nThe first elements of p are a, b, c; the last 3 are α, β, γ (in radians).\n\n\n\n\n\nLattice(nml::SystemNamelist)\n\nReturn a Lattice from a SystemNamelist.\n\n\n\n\n\nLattice(card::CellParametersCard)\n\nReturn a Lattice from a CellParametersCard.\n\n\n\n\n\nLattice(card::PWInput)\n\nReturn a Lattice from a PWInput.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#CrystallographyBase.cellvolume","page":"Inputs.PWscf module","title":"CrystallographyBase.cellvolume","text":"cellvolume(card)\n\nReturn the cell volume of a CellParametersCard or RefCellParametersCard, in atomic unit.\n\nwarning: Warning\nIt will throw an error if the option is \"alat\".\n\n\n\n\n\ncellvolume(nml::SystemNamelist)\n\nReturn the volume of the cell based on the information given in a SystemNamelist, in atomic unit.\n\n\n\n\n\ncellvolume(input::PWInput)\n\nReturn the volume of the cell based on the information given in a PWInput, in atomic unit.\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.ControlNamelist","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.ControlNamelist","text":"ControlNamelist(calculation, title, verbosity, restart_mode, wf_collect, nstep, iprint, tstress, tprnfor, dt, outdir, wfcdir, prefix, lkpoint_dir, max_seconds, etot_conv_thr, forc_conv_thr, disk_io, pseudo_dir, tefield, dipfield, lelfield, nberrycyc, lorbm, lberry, gdir, nppstr, lfcpopt, gate)\nControlNamelist(; kwargs...)\nControlNamelist(::ControlNamelist; kwargs...)\n\nRepresent the CONTROL namelist of pw.x.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.SystemNamelist","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.SystemNamelist","text":"SystemNamelist(ibrav, celldm, A, B, C, cosAB, cosAC, cosBC, nat, ntyp, nbnd, tot_charge, starting_charge, tot_magnetization, starting_magnetization, ecutwfc, ecutrho, ecutfock, nr1, nr2, nr3, nr1s, nr2s, nr3s, nosym, nosym_evc, noinv, no_t_rev, force_symmorphic, use_all_frac, occupations, one_atom_occupations, starting_spin_angle, degauss, smearing, nspin, noncolin, ecfixed, qcutz, q2sigma, input_dft, exx_fraction, screening_parameter, exxdiv_treatment, x_gamma_extrapolation, ecutvcut, nqx1, nqx2, nqx3, localization_thr, lda_plus_u, lda_plus_u_kind, Hubbard_U, Hubbard_J0, Hubbard_alpha, Hubbard_beta, starting_ns_eigenvalue, U_projection_type, edir, emaxpos, eopreg, eamp, angle1, angle2, constrained_magnetization, fixed_magnetization, lambda, report, lspinorb, assume_isolated, esm_bc, esm_w, esm_efield, esm_nfit, fcp_mu, vdw_corr, london, london_s6, london_c6, london_rvdw, london_rcut, ts_vdw_econv_thr, ts_vdw_isolated, xdm, xdm_a1, xdm_a2, space_group, uniqueb, origin_choice, rhombohedral, zgate, relaxz, block, block_1, block_2, block_height)\nSystemNamelist(; kwargs...)\nSystemNamelist(::SystemNamelist; kwargs...)\n\nRepresent the SYSTEM namelist of pw.x.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.ElectronsNamelist","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.ElectronsNamelist","text":"ElectronsNamelist(electron_maxstep, scf_must_converge, conv_thr, adaptive_thr, conv_thr_init, conv_thr_multi, mixing_mode, mixing_beta, mixing_ndim, mixing_fixed_ns, diagonalization, ortho_para, diago_thr_init, diago_cg_maxiter, diago_david_ndim, diago_full_acc, efield, efield_cart, efield_phase, startingpot, startingwfc, tqr)\nElectronsNamelist(; kwargs...)\nElectronsNamelist(::ElectronsNamelist; kwargs...)\n\nRepresent the ELECTRONS namelist of pw.x.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.IonsNamelist","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.IonsNamelist","text":"IonsNamelist(ion_dynamics, ion_positions, pot_extrapolation, wfc_extrapolation, remove_rigid_rot, ion_temperature, tempw, tolp, delta_t, nraise, refold_pos, upscale, bfgs_ndim, trust_radius_max, trust_radius_min, trust_radius_ini, w_1, w_2)\nIonsNamelist(; kwargs...)\nIonsNamelist(::IonsNamelist; kwargs...)\n\nRepresent the IONS namelist of pw.x.\n\nInput this namelist only if calculation is \"relax\", \"md\", \"vc-relax\", or \"vc-md\".\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.CellNamelist","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.CellNamelist","text":"CellNamelist(cell_dynamics, press, wmass, cell_factor, press_conv_thr, cell_dofree)\nCellNamelist(; kwargs...)\nCellNamelist(::CellNamelist; kwargs...)\n\nRepresent the CELL namelist of pw.x.\n\nInput this namelist only if calculation is \"vc-relax\" or \"vc-md\".\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.DosNamelist","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.DosNamelist","text":"DosNamelist(prefix, outdir, ngauss, degauss, Emin, Emax, DeltaE, fildos)\nDosNamelist(; kwargs...)\nDosNamelist(::DosNamelist; kwargs...)\n\nRepresent the DOS namelist of dos.x.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.BandsNamelist","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.BandsNamelist","text":"BandsNamelist(prefix, outdir, filband, spin_component, lsigma, lp, filp, lsym, no_overlap, plot_2d, firstk, lastk)\nBandsNamelist(; kwargs...)\nBandsNamelist(::BandsNamelist; kwargs...)\n\nRepresent the BANDS namelist of bands.x.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.AtomicSpecies","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.AtomicSpecies","text":"AtomicSpecies(atom::Union{AbstractChar,String}, mass::Float64, pseudopot::String)\nAtomicSpecies(x::AtomicPosition, mass, pseudopot)\n\nRepresent each line of the ATOMIC_SPECIES card in QE.\n\nThe atom field accepts at most 3 characters.\n\nExamples\n\njulia> AtomicSpecies(\"C1\", 12, \"C.pbe-n-kjpaw_psl.1.0.0.UPF\")\nAtomicSpecies(\"C1\", 12.0, \"C.pbe-n-kjpaw_psl.1.0.0.UPF\")\n\njulia> AtomicSpecies(\n           AtomicPosition('S', [0.500000000, 0.288675130, 1.974192764]),\n           32.066,\n           \"S.pz-n-rrkjus_psl.0.1.UPF\",\n       )\nAtomicSpecies(\"S\", 32.066, \"S.pz-n-rrkjus_psl.0.1.UPF\")\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.AtomicSpeciesCard","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.AtomicSpeciesCard","text":"AtomicSpeciesCard <: Card\n\nRepresent the ATOMIC_SPECIES card in QE. It does not have an \"option\".\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.AtomicPosition","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.AtomicPosition","text":"AtomicPosition(atom::Union{AbstractChar,String}, pos::Vector{Float64}[, if_pos::Vector{Int}])\nAtomicPosition(x::AtomicSpecies, pos, if_pos)\n\nRepresent each line of the ATOMIC_POSITIONS card in QE.\n\nThe atom field accepts at most 3 characters.\n\nExamples\n\njulia> AtomicPosition('O', [0, 0, 0])\nAtomicPosition(\"O\", [0.0, 0.0, 0.0], Bool[1, 1, 1])\n\njulia> AtomicPosition(\n           AtomicSpecies('S', 32.066, \"S.pz-n-rrkjus_psl.0.1.UPF\"),\n           [0.500000000, 0.288675130, 1.974192764],\n       )\nAtomicPosition(\"S\", [0.5, 0.28867513, 1.974192764], Bool[1, 1, 1])\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.AtomicPositionsCard","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.AtomicPositionsCard","text":"AtomicPositionsCard <: Card\n\nRepresent the ATOMIC_POSITIONS card in QE.\n\nArguments\n\ndata::AbstractVector{AtomicPosition}: A vector containing AtomicPositions.\noption::String=\"alat\": allowed values are: \"alat\", \"bohr\", \"angstrom\", \"crystal\", and \"crystal_sg\".\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.CellParametersCard","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.CellParametersCard","text":"CellParametersCard{T<:Real} <: AbstractCellParametersCard\nCellParametersCard(data::AbstractMatrix, option::String)\n\nRepresent the CELL_PARAMETERS cards in PWscf and CP packages.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.SpecialPointsCard","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.SpecialPointsCard","text":"SpecialKPointsCard(data, option)\n\nRepresent the K_POINTS card in QE.\n\nArguments\n\ndata::Union{MonkhorstPackGrid,GammaPoint,AbstractVector{SpecialKPoint}}: A Γ point, a Monkhorst–Pack grid or a vector containing SpecialKPoints.\noption::String=\"tpiba\": allowed values are: \"tpiba\", \"automatic\", \"crystal\", \"gamma\", \"tpibab\", \"crystalb\", \"tpibac\" and \"crystalc\".\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.PWInput","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.PWInput","text":"PWInput <: QuantumESPRESSOInput\nPWInput(control, system, electrons, ions, cell, atomic_species, atomic_positions, k_points, cell_parameters)\n\nConstruct a PWInput which represents the input of program pw.x.\n\nArguments\n\ncontrol::ControlNamelist=ControlNamelist(): the CONTROL namelist of the input. Optional.\nsystem::SystemNamelist=SystemNamelist(): the SYSTEM namelist of the input. Optional.\nelectrons::ElectronsNamelist=ElectronsNamelist(): the ELECTRONS namelist of the input. Optional.\nions::IonsNamelist=IonsNamelist(): the IONS namelist of the input. Optional.\ncell::CellNamelist=CellNamelist(): the CELL namelist of the input. Optional.\natomic_species::AtomicSpeciesCard: the ATOMIC_SPECIES card of the input. Must be provided explicitly.\natomic_positions::AtomicPositionsCard: the ATOMIC_POSITIONS card of the input. Must be provided explicitly.\nk_points::AbstractKPointsCard: the K_POINTS card of the input. Must be provided explicitly.\ncell_parameters::Union{Nothing,CellParametersCard}: the CELL_PARAMETERS card of the input. Must be either nothing or a CellParametersCard.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PWscf/#Methods","page":"Inputs.PWscf module","title":"Methods","text":"","category":"section"},{"location":"api/Inputs/PWscf/","page":"Inputs.PWscf module","title":"Inputs.PWscf module","text":"optconvert\ngetpseudodir\ngetpotentials","category":"page"},{"location":"api/Inputs/PWscf/#QuantumESPRESSOBase.Inputs.PWscf.optconvert","page":"Inputs.PWscf module","title":"QuantumESPRESSOBase.Inputs.PWscf.optconvert","text":"optconvert(new_option::AbstractString, card::AbstractCellParametersCard)\n\nConvert the option of an AbstractCellParametersCard from \"bohr\" to \"angstrom\", or its reverse.\n\nwarning: Warning\nIt does not support conversion between \"alat\" and the others.\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/PWscf/#AbInitioSoftwareBase.Inputs.getpseudodir","page":"Inputs.PWscf module","title":"AbInitioSoftwareBase.Inputs.getpseudodir","text":"getpseudodir(nml::ControlNamelist)\n\nGet the directory storing the pseudopotential files.\n\n\n\n\n\ngetpseudodir(input::PWInput)\n\nGet the directory storing the pseudopotential files.\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/PWscf/#AbInitioSoftwareBase.Inputs.getpotentials","page":"Inputs.PWscf module","title":"AbInitioSoftwareBase.Inputs.getpotentials","text":"getpotentials(card::AtomicSpeciesCard)\n\nGet the pseudopotential names from an AtomicSpeciesCard.\n\n\n\n\n\ngetpotentials(input::PWInput)\n\nGet the pseudopotential names from a PWInput.\n\n\n\n\n\n","category":"function"},{"location":"developers/design-principles/#Design-Principles","page":"Design Principles","title":"Design Principles","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Pages = [\"design-principles.md\"]\nDepth = 3","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"We adopt some SciML design guidelines here. Please read it before contributing!","category":"page"},{"location":"developers/design-principles/#Consistency-vs-adherence","page":"Design Principles","title":"Consistency vs adherence","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"According to PEP8:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.However, know when to be inconsistent—sometimes style guide recommendations just aren't applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don’t hesitate to ask!","category":"page"},{"location":"developers/design-principles/#Community-contribution-guidelines","page":"Design Principles","title":"Community contribution guidelines","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"For a comprehensive set of community contribution guidelines, refer to ColPrac. A relevant point to highlight PRs should do one thing. In the context of style, this means that PRs which update the style of a package's code should not be mixed with fundamental code contributions. This separation makes it easier to ensure that large style improvement are isolated from substantive (and potentially breaking) code changes.","category":"page"},{"location":"developers/design-principles/#Open-source-contributions-are-allowed-to-start-small-and-grow-over-time","page":"Design Principles","title":"Open source contributions are allowed to start small and grow over time","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"If the standard for code contributions is that every PR needs to support every possible input type that anyone can think of, the barrier would be too high for newcomers. Instead, the principle is to be as correct as possible to begin with, and grow the generic support over time. All recommended functionality should be tested, any known generality issues should be documented in an issue (and with a @test_broken test when possible). However, a function which is known to not be GPU-compatible is not grounds to block merging, rather it is an encouragement for a follow-up PR to improve the general type support!","category":"page"},{"location":"developers/design-principles/#Generic-code-is-preferred-unless-code-is-known-to-be-specific","page":"Design Principles","title":"Generic code is preferred unless code is known to be specific","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"For example, the code:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"function f(A, B)\n    for i in 1:length(A)\n        A[i] = A[i] + B[i]\n    end\nend","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"would not be preferred for two reasons. One is that it assumes A uses one-based indexing, which would fail in cases like OffsetArrays and FFTViews. Another issue is that it requires indexing, while not all array types support indexing (for example, CuArrays). A more generic compatible implementation of this function would be to use broadcast, for example:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"function f(A, B)\n    @. A = A + B\nend","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"which would allow support for a wider variety of array types.","category":"page"},{"location":"developers/design-principles/#Internal-types-should-match-the-types-used-by-users-when-possible","page":"Design Principles","title":"Internal types should match the types used by users when possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"If f(A) takes the input of some collections and computes an output from those collections, then it should be expected that if the user gives A as an Array, the computation should be done via Arrays. If A was a CuArray, then it should be expected that the computation should be internally done using a CuArray (or appropriately error if not supported). For these reasons, constructing arrays via generic methods, like similar(A), is preferred when writing f instead of using non-generic constructors like Array(undef,size(A)) unless the function is documented as being non-generic.","category":"page"},{"location":"developers/design-principles/#Trait-definition-and-adherence-to-generic-interface-is-preferred-when-possible","page":"Design Principles","title":"Trait definition and adherence to generic interface is preferred when possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Julia provides many interfaces, for example:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Iteration\nIndexing\nBroadcast","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Those interfaces should be followed when possible. For example, when defining broadcast overloads, one should implement a BroadcastStyle as suggested by the documentation instead of simply attempting to bypass the broadcast system via copyto! overloads.","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"When interface functions are missing, these should be added to Base Julia or an interface package, like ArrayInterface.jl. Such traits should be declared and used when appropriate. For example, if a line of code requires mutation, the trait ArrayInterface.ismutable(A) should be checked before attempting to mutate, and informative error messages should be written to capture the immutable case (or, an alternative code which does not mutate should be given).","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"One example of this principle is demonstrated in the generation of Jacobian matrices. In many scientific applications, one may wish to generate a Jacobian cache from the user's input u0. A naive way to generate this Jacobian is J = similar(u0,length(u0),length(u0)). However, this will generate a Jacobian J such that J isa Matrix.","category":"page"},{"location":"developers/design-principles/#Macros-should-be-limited-and-only-be-used-for-syntactic-sugar","page":"Design Principles","title":"Macros should be limited and only be used for syntactic sugar","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Macros define new syntax, and for this reason they tend to be less composable than other coding styles and require prior familiarity to be easily understood. One principle to keep in mind is, \"can the person reading the code easily picture what code is being generated?\". For example, a user of Soss.jl may not know what code is being generated by:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"@model (x, α) begin\n    σ ~ Exponential()\n    β ~ Normal()\n    y ~ For(x) do xj\n        Normal(α + β * xj, σ)\n    end\n    return y\nend","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"and thus using such a macro as the interface is not preferred when possible. However, a macro like @muladd is trivial to picture on a code (it recursively transforms a*b + c to muladd(a,b,c) for more accuracy and efficiency), so using such a macro for example:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"julia> @macroexpand(@muladd k3 = f(t + c3 * dt, @. uprev + dt * (a031 * k1 + a032 * k2)))\n:(k3 = f((muladd)(c3, dt, t), (muladd).(dt, (muladd).(a032, k2, (*).(a031, k1)), uprev)))","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"is recommended. Some macros in this category are:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"@inbounds\n@muladd\n@view\n@named\n@.\n@..","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Some performance macros, like @simd, @threads, or @turbo from LoopVectorization.jl, make an exception in that their generated code may be foreign to many users. However, they still are classified as appropriate uses as they are syntactic sugar since they do (or should) not change the behavior of the program in measurable ways other than performance.","category":"page"},{"location":"developers/design-principles/#Errors-should-be-caught-as-high-as-possible,-and-error-messages-should-be-contextualized-for-newcomers","page":"Design Principles","title":"Errors should be caught as high as possible, and error messages should be contextualized for newcomers","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Whenever possible, defensive programming should be used to check for potential errors before they are encountered deeper within a package. For example, if one knows that f(u0,p) will error unless u0 is the size of p, this should be caught at the start of the function to throw a domain specific error, for example \"parameters and initial condition should be the same size\".","category":"page"},{"location":"developers/design-principles/#Subpackaging-and-interface-packages-is-preferred-over-conditional-modules-via-Requires.jl","page":"Design Principles","title":"Subpackaging and interface packages is preferred over conditional modules via Requires.jl","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Requires.jl should be avoided at all costs. If an interface package exists, such as ChainRulesCore.jl for defining automatic differentiation rules without requiring a dependency on the whole ChainRules.jl system, or RecipesBase.jl which allows for defining Plots.jl plot recipes without a dependency on Plots.jl, a direct dependency on these interface packages is preferred.","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Otherwise, instead of resorting to a conditional dependency using Requires.jl, it is preferred one creates subpackages, i.e. smaller independent packages kept within the same Github repository with independent versioning and package management. An example of this is seen in Optimization.jl which has subpackages like OptimizationBBO.jl for BlackBoxOptim.jl support.","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Some important interface packages to know about are:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"ChainRulesCore.jl\nRecipesBase.jl\nArrayInterface.jl\nCommonSolve.jl\nSciMLBase.jl","category":"page"},{"location":"developers/design-principles/#Functions-should-either-attempt-to-be-non-allocating-and-reuse-caches,-or-treat-inputs-as-immutable","page":"Design Principles","title":"Functions should either attempt to be non-allocating and reuse caches, or treat inputs as immutable","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Mutating codes and non-mutating codes fall into different worlds. When a code is fully immutable, the compiler can better reason about dependencies, optimize the code, and check for correctness. However, many times a code making the fullest use of mutation can outperform even what the best compilers of today can generate. That said, the worst of all worlds is when code mixes mutation with non-mutating code. Not only is this a mishmash of coding styles, it has the potential non-locality and compiler proof issues of mutating code while not fully benefiting from the mutation.","category":"page"},{"location":"developers/design-principles/#Out-Of-Place-and-Immutability-is-preferred-when-sufficient-performant","page":"Design Principles","title":"Out-Of-Place and Immutability is preferred when sufficient performant","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Mutation is used to get more performance by decreasing the amount of heap allocations. However, if it's not helpful for heap allocations in a given spot, do not use mutation. Mutation is scary and should be avoided unless it gives an immediate benefit. For example, if matrices are sufficiently large, then A*B is as fast as mul!(C,A,B), and thus writing A*B is preferred (unless the rest of the function is being careful about being fully non-allocating, in which case this should be mul! for consistency).","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Similarly, when defining types, using struct is preferred to mutable struct unless mutating the struct is a common occurrence. Even if mutating the struct is a common occurrence, see whether using Setfield.jl is sufficient. The compiler will optimize the construction of immutable structs, and thus this can be more efficient if it's not too much of a code hassle.","category":"page"},{"location":"developers/design-principles/#Tests-should-attempt-to-cover-a-wide-gamut-of-input-types","page":"Design Principles","title":"Tests should attempt to cover a wide gamut of input types","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Code coverage numbers are meaningless if one does not consider the input types. For example, one can hit all the code with Array, but that does not test whether CuArray is compatible! Thus, it's always good to think of coverage not in terms of lines of code but in terms of type coverage. A good list of number types to think about are:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Float64\nFloat32\nComplex\nDual\nBigFloat","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Array types to think about testing are:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Array\nOffsetArray\nCuArray","category":"page"},{"location":"developers/design-principles/#When-in-doubt,-a-submodule-should-become-a-subpackage-or-separate-package","page":"Design Principles","title":"When in doubt, a submodule should become a subpackage or separate package","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Keep packages to one core idea. If there's something separate enough to be a submodule, could it instead be a separate well-tested and documented package to be used by other packages? Most likely yes.","category":"page"},{"location":"developers/design-principles/#Globals-should-be-avoided-whenever-possible","page":"Design Principles","title":"Globals should be avoided whenever possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Global variables should be avoided whenever possible. When required, global variables should be constants and have an all uppercase name separated with underscores (e.g. MY_CONSTANT). They should be defined at the top of the file, immediately after imports and exports but before an __init__ function. If you truly want mutable global style behavior you may want to look into mutable containers.","category":"page"},{"location":"developers/design-principles/#Type-stable-and-Type-grounded-code-is-preferred-wherever-possible","page":"Design Principles","title":"Type-stable and Type-grounded code is preferred wherever possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Type-stable and type-grounded code helps the compiler create not only more optimized code, but also faster to compile code. Always keep containers well-typed, functions specializing on the appropriate arguments, and types concrete.","category":"page"},{"location":"developers/design-principles/#Closures-should-be-avoided-whenever-possible","page":"Design Principles","title":"Closures should be avoided whenever possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Closures can cause accidental type instabilities that are difficult to track down and debug; in the long run it saves time to always program defensively and avoid writing closures in the first place, even when a particular closure would not have been problematic. A similar argument applies to reading code with closures; if someone is looking for type instabilities, this is faster to do when code does not contain closures. Furthermore, if you want to update variables in an outer scope, do so explicitly with Refs or self defined structs. For example,","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"map(Base.Fix2(getindex, i), vector_of_vectors)","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"is preferred over","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"map(v -> v[i], vector_of_vectors)","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"or","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"[v[i] for v in vector_of_vectors]","category":"page"},{"location":"developers/design-principles/#Numerical-functionality-should-use-the-appropriate-generic-numerical-interfaces","page":"Design Principles","title":"Numerical functionality should use the appropriate generic numerical interfaces","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"While you can use A\\b to do a linear solve inside a package, that does not mean that you should. This interface is only sufficient for performing factorizations, and so that limits the scaling choices, the types of A that can be supported, etc. Instead, linear solves within packages should use LinearSolve.jl. Similarly, nonlinear solves should use NonlinearSolve.jl. Optimization should use Optimization.jl. Etc. This allows the full generic choice to be given to the user without depending on every solver package (effectively recreating the generic interfaces within each package).","category":"page"},{"location":"developers/design-principles/#Functions-should-capture-one-underlying-principle","page":"Design Principles","title":"Functions should capture one underlying principle","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Functions mean one thing. Every dispatch of + should be \"the meaning of addition on these types\". While in theory you could add dispatches to + that mean something different, that will fail in generic code for which + means addition. Thus, for generic code to work, code needs to adhere to one meaning for each function. Every dispatch should be an instantiation of that meaning.","category":"page"},{"location":"developers/design-principles/#Internal-choices-should-be-exposed-as-options-whenever-possible","page":"Design Principles","title":"Internal choices should be exposed as options whenever possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Whenever possible, numerical values and choices within scripts should be exposed as options to the user. This promotes code reusability beyond the few cases the author may have expected.","category":"page"},{"location":"developers/design-principles/#Prefer-code-reuse-over-rewrites-whenever-possible","page":"Design Principles","title":"Prefer code reuse over rewrites whenever possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"If a package has a function you need, use the package. Add a dependency if you need to. If the function is missing a feature, prefer to add that feature to said package and then add it as a dependency. If the dependency is potentially troublesome, for example because it has a high load time, prefer to spend time helping said package fix these issues and add the dependency. Only when it does not seem possible to make the package \"good enough\" should using the package be abandoned. If it is abandoned, consider building a new package for this functionality as you need it, and then make it a dependency.","category":"page"},{"location":"developers/design-principles/#Prefer-to-not-shadow-functions","page":"Design Principles","title":"Prefer to not shadow functions","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Two functions can have the same name in Julia by having different namespaces. For example, X.f and Y.f can be two different functions, with different dispatches, but the same name. This should be avoided whenever possible. Instead of creating MyPackage.sort, consider adding dispatches to Base.sort for your types if these new dispatches match the underlying principle of the function. If it doesn't, prefer to use a different name. While using MyPackage.sort is not conflicting, it is going to be confusing for most people unfamiliar with your code, so MyPackage.special_sort would be more helpful to newcomers reading the code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuantumESPRESSOBase","category":"page"},{"location":"#QuantumESPRESSOBase","page":"Home","title":"QuantumESPRESSOBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QuantumESPRESSOBase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"QuantumESPRESSOBase.jl declares basic data types and methods for manipulating crystal structures, generating input files for Quantum ESPRESSO, error checking before running, etc. It is written purely in language Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please cite this package as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Q. Zhang, C. Gu, J. Zhuang et al., express: extensible, high-level workflows for swifter ab initio materials modeling, Computer Physics Communications, 108515, doi: https://doi.org/10.1016/j.cpc.2022.108515.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The BibTeX format is:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{ZHANG2022108515,\n  title    = {express: extensible, high-level workflows for swifter ab initio materials modeling},\n  journal  = {Computer Physics Communications},\n  pages    = {108515},\n  year     = {2022},\n  issn     = {0010-4655},\n  doi      = {https://doi.org/10.1016/j.cpc.2022.108515},\n  url      = {https://www.sciencedirect.com/science/article/pii/S001046552200234X},\n  author   = {Qi Zhang and Chaoxuan Gu and Jingyi Zhuang and Renata M. Wentzcovitch},\n  keywords = {automation, workflow, high-level, high-throughput, data lineage}\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"We also have an arXiv prepint.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The code is hosted on GitHub, with some continuous integration services to test its validity.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This repository is created and maintained by @singularitti. You are very welcome to contribute.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add QuantumESPRESSOBase","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or, equivalently, via the Pkg API:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(\"QuantumESPRESSOBase\")","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"STABLE — documentation of the most recently tagged version.\nDEV — documentation of the in-development version.","category":"page"},{"location":"#Project-status","page":"Home","title":"Project status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is tested against, and being developed for, Julia 1.6 and above on Linux, macOS, and Windows.","category":"page"},{"location":"#Questions-and-contributions","page":"Home","title":"Questions and contributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Usage questions can be posted on our discussion page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contributions are very welcome, as are feature requests and suggestions. Please open an issue if you encounter any problems. The Contributing page has a few guidelines that should be followed when opening pull requests and contributing code.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"installation.md\",\n    \"developers/contributing.md\",\n    \"developers/style-guide.md\",\n    \"developers/design-principles.md\",\n    \"troubleshooting.md\",\n]\nDepth = 3","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"public.md\"]","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"public.md\"]","category":"page"},{"location":"api/api/#API","page":"QuantumESPRESSOBase module","title":"API","text":"","category":"section"},{"location":"api/api/#QuantumESPRESSOBase-module","page":"QuantumESPRESSOBase module","title":"QuantumESPRESSOBase module","text":"","category":"section"},{"location":"api/api/","page":"QuantumESPRESSOBase module","title":"QuantumESPRESSOBase module","text":"Modules = [QuantumESPRESSOBase]","category":"page"},{"location":"api/Inputs/PHonon/","page":"Inputs.PHonon module","title":"Inputs.PHonon module","text":"CurrentModule = QuantumESPRESSOBase.Inputs.PHonon","category":"page"},{"location":"api/Inputs/PHonon/#QuantumESPRESSOBase.Inputs.PHonon-module","page":"Inputs.PHonon module","title":"QuantumESPRESSOBase.Inputs.PHonon module","text":"","category":"section"},{"location":"api/Inputs/PHonon/","page":"Inputs.PHonon module","title":"Inputs.PHonon module","text":"Pages = [\"PHonon.md\"]\nDepth = 3","category":"page"},{"location":"api/Inputs/PHonon/#Types","page":"Inputs.PHonon module","title":"Types","text":"","category":"section"},{"location":"api/Inputs/PHonon/","page":"Inputs.PHonon module","title":"Inputs.PHonon module","text":"PhNamelist\nQ2rNamelist\nMatdynNamelist\nDynmatNamelist","category":"page"},{"location":"api/Inputs/PHonon/#QuantumESPRESSOBase.Inputs.PHonon.PhNamelist","page":"Inputs.PHonon module","title":"QuantumESPRESSOBase.Inputs.PHonon.PhNamelist","text":"PhNamelist(amass, outdir, prefix, niter_ph, tr2_ph, alpha_mix, nmix_ph, verbosity, reduce_io, max_seconds, fildyn, fildrho, fildvscf, epsil, lrpa, lnoloc, trans, lraman, eth_rps, eth_ns, dek, recover, low_directory_check, only_init, qplot, q2d, q_in_band_form, electron_phonon, lshift_q, zeu, zue, elop, fpol, ldisp, nogg, asr, ldiag, lqdir, search_sym, nq1, nq2, nq3, nk1, nk2, nk3, k1, k2, k3, start_irr, last_irr, nat_todo, modenum, start_q, last_q, dvscf_star, drho_star)\nPhNamelist(; kwargs...)\nPhNamelist(::PhNamelist; kwargs...)\n\nRepresent the INPUTPH namelist of ph.x.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PHonon/#QuantumESPRESSOBase.Inputs.PHonon.Q2rNamelist","page":"Inputs.PHonon module","title":"QuantumESPRESSOBase.Inputs.PHonon.Q2rNamelist","text":"Q2rNamelist(fildyn, flfrc, loto_2d, zasr)\nQ2rNamelist(; kwargs...)\nQ2rNamelist(::Q2rNamelist; kwargs...)\n\nRepresent the INPUT namelist of q2r.x.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PHonon/#QuantumESPRESSOBase.Inputs.PHonon.MatdynNamelist","page":"Inputs.PHonon module","title":"QuantumESPRESSOBase.Inputs.PHonon.MatdynNamelist","text":"MatdynNamelist(dos, deltaE, ndos, nk1, nk2, nk3, asr, readtau, flfrc, fldos, flfrq, flvec, fleig, fldyn, fltau, amass, at, ntyp, l1, l2, l3, la2F, q_in_band_form, eigen_similarity, q_in_cryst_coord, na_ifc, fd, nosym, loto_2d)\nMatdynNamelist(; kwargs...)\nMatdynNamelist(::MatdynNamelist; kwargs...)\n\nRepresent the INPUT namelist of matdyn.x.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PHonon/#QuantumESPRESSOBase.Inputs.PHonon.DynmatNamelist","page":"Inputs.PHonon module","title":"QuantumESPRESSOBase.Inputs.PHonon.DynmatNamelist","text":"DynmatNamelist(asr, axis, fildyn, filout, filmol, filxsf, fileig, amass, q, lperm, lplasma)\nDynmatNamelist(; kwargs...)\nDynmatNamelist(::DynmatNamelist; kwargs...)\n\nRepresent the INPUT namelist of dynmat.x.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/PHonon/#Methods","page":"Inputs.PHonon module","title":"Methods","text":"","category":"section"},{"location":"api/Inputs/PHonon/","page":"Inputs.PHonon module","title":"Inputs.PHonon module","text":"relayinfo","category":"page"},{"location":"api/Inputs/PHonon/#QuantumESPRESSOBase.Inputs.PHonon.relayinfo","page":"Inputs.PHonon module","title":"QuantumESPRESSOBase.Inputs.PHonon.relayinfo","text":"relayinfo(from::PWInput, to::PhInput)\n\nRelay shared information from a PWInput to a PhInput.\n\nA PWInput before a PhInput has the information of outdir and prefix. They must keep the same in a phonon calculation.\n\n\n\n\n\nrelayinfo(from::PhInput, to::Q2rInput)\n\nRelay shared information from a PhInput to a Q2rInput.\n\nA PhInput before a Q2rInput has the information of fildyn. It must keep the same in a q2r calculation.\n\n\n\n\n\nrelayinfo(from::Q2rInput, to::MatdynInput)\n\nRelay shared information from a Q2rInput to a MatdynInput.\n\nA Q2rInput before a MatdynInput has the information of fildyn, flfrc and loto_2d. They must keep the same in a matdyn calculation.\n\n\n\n\n\nrelayinfo(from::PhInput, to::DynmatInput)\n\nRelay shared information from a PhInput to a DynmatInput.\n\nA PhInput before a DynmatInput has the information of asr, fildyn and amass. They must keep the same in a dynmat calculation.\n\n\n\n\n\n","category":"function"}]
}
